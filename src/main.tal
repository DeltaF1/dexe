( 
	app/dexe : hex editor

	- ctrl+r - edit filename
	- ctrl+R - erase filename
	- ctrl+o - open file
	- ctrl+s - save file
	- ctrl+a - select all

	- ctrl+c - copy selection
	- ctrl+C - copy selection as text
	- ctrl+v - paste selection

	- arrows    - move selection
	- enter     - insert byte
	- backspace - delete byte )

~src/utils.tal

( devices )

|00 @System     &vector $2 &pad     $6 &r      $2 &g     $2 &b     $2
|10 @Console    &vector $2 &read    $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button  $1 &key    $1
|90 @Mouse      &vector $2 &x       $2 &y      $2 &state $1 &wheel $1
|a0 @File       &vector $2 &success $2 &offset $2 &pad   $2 &name  $2 &length $2 &load $2 &save $2

( variables )

|0000

@length $2
@cursor
	&x $2 &y $2 &last $1
@state
	&timer $1 &blink $1 &changed $1
@path
	&name $20
@selection
	&from $2 &to $2 &scroll $2 
	&mode $1 &nibble $1
@frame
	&x $2 &y $2 &x2 $2 &y2 $2
@file-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@byte-frame
	&x $2 &y $2 &x2 $2 &y2 $2 &rows $2
@char-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@tile-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@menu-frame
	&x $2 &y $2 &x2 $2 &y2 $2

( program )

|0100

	( theme )
	#0f77 .System/r DEO2
	#0fc7 .System/g DEO2
	#0f97 .System/b DEO2

	( vectors )
	;on-console .Console/vector DEO2
	;untrap JSR2

	( set size )
	( default ) 
	#0110 .Screen/width DEO2 
	#0188 .Screen/height DEO2
	( GBA #00f0 .Screen/width DEO2 #00a0 .Screen/height DEO2 )


	( frame )
	.Screen/width DEI2 2// #0078 -- DUP2 .frame/x STZ2
		#00f0 ++ .frame/x2 STZ2
	#0008 .frame/y STZ2
		.Screen/height DEI2 #0008 -- .frame/y2 STZ2

	.frame/x LDZ2
		.file-frame/x STZ2 .frame/x2 LDZ2  .file-frame/x2 STZ2
	.frame/y LDZ2
		DUP2 .file-frame/y STZ2 #0018 ++ .file-frame/y2 STZ2

	.frame/x LDZ2
		DUP2 .byte-frame/x STZ2 #0098 ++ .byte-frame/x2 STZ2
	.file-frame/y2 LDZ2 #0008 ++
		.byte-frame/y STZ2
	.Screen/height DEI2 #0020 -- .byte-frame/y2 STZ2

	.byte-frame/y2 LDZ2 .byte-frame/y LDZ2 -- 10// .byte-frame/rows STZ2

	.byte-frame/x2 LDZ2 #0004 ++
		DUP2 .tile-frame/x STZ2 #0010 ++ .tile-frame/x2 STZ2
	.byte-frame/y LDZ2
		DUP2 .tile-frame/y STZ2 #0100 ++ .tile-frame/y2 STZ2

	.tile-frame/x2 LDZ2 #0004 ++
		DUP2 .char-frame/x STZ2 #0040 ++ .char-frame/x2 STZ2
	.byte-frame/y LDZ2
		DUP2 .char-frame/y STZ2 #0100 ++ .char-frame/y2 STZ2

	.frame/x LDZ2
		.menu-frame/x STZ2 .frame/x2 LDZ2 .menu-frame/x2 STZ2
	.frame/y2 LDZ2 #0010 --
		DUP2 .menu-frame/y STZ2 #0010 ++ .menu-frame/y2 STZ2

	;new-file JSR2
	;data ;select JSR2

	( theme support )
	;load-theme JSR2

BRK

@on-console ( -> )

	( starting )
	;&trap LDA ,&started JCN
		#00 ;draw-filepath JSR2
		;path/name #0020 ;mclr JSR2
		#01 ,&trap STR
		&started
	( append )
	.Console/read DEI #20 < ,&validate JCN
	;path/name ;slen JSR2 #0020 == ,&validate JCN
		;path/name .Console/read DEI ;sput JSR2 
		BRK
		&validate
	( validate )
	;load-file JSR2
	#01 ;draw-filepath JSR2
	#00 ,&trap STR

BRK
	&trap $1

@untrap ( -- )

	( vectors )
	;on-frame .Screen/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2

	( filepath )
	#00 .state/blink STZ
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

RTN

@trap ( -- )

	( vectors )
	;on-frame-trap .Screen/vector DEO2
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2

	( filepath )
	#01 .state/blink STZ
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

	( clear cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

RTN

@on-frame ( -> )
	( unused )
BRK

@on-frame-trap ( -> )

	.state/timer LDZ INC
	DUP 8MOD ,&no-blink JCN
		.state/blink LDZ #00 =
			DUP 8* INC ;draw-filepath JSR2
			.state/blink STZ
		&no-blink
	.state/timer STZ

BRK

@on-button ( -> )

	( arrows )
	.Controller/button DEI
	DUP #44 ! ,&no-left-sel JCN 
		.selection/to LDZ2 #0001 -- ;select-until JSR2 POP BRK
		&no-left-sel
	DUP #84 ! ,&no-right-sel JCN
		.selection/to LDZ2 #0001 ++ ;select-until JSR2 POP BRK
		&no-right-sel
	DUP #10 ! ,&no-up JCN
		.selection/from LDZ2 #0008 -- ;select JSR2 POP BRK
		&no-up
	DUP #20 ! ,&no-down JCN
		.selection/from LDZ2 #0008 ++ ;select JSR2 POP BRK
		&no-down
	DUP #40 ! ,&no-left JCN
		.selection/from LDZ2 #0001 -- ;select JSR2 POP BRK
		&no-left
	DUP #80 ! ,&no-right JCN
		.selection/from LDZ2 #0001 ++ ;select JSR2 POP BRK
		&no-right
	DUP #14 ! ,&no-shift-up JCN
		.selection/to LDZ2 #0008 -- ;select-until JSR2 POP BRK
		&no-shift-up
	DUP #24 ! ,&no-shift-down JCN
		.selection/to LDZ2 #0008 ++ ;select-until JSR2 POP BRK
		&no-shift-down
	DUP #11 ! ,&no-ctrl-up JCN
		.selection/from LDZ2 #0040 -- ;select JSR2 POP BRK
		&no-ctrl-up
	DUP #21 ! ,&no-ctrl-down JCN
		.selection/from LDZ2 #0040 ++ ;select JSR2 POP BRK
		&no-ctrl-down
	DUP #08 ! ,&no-esc JCN
		;reset-selection JSR2
		&no-esc

	( ctrl )
	#01 AND ;on-control JCN2

	( keys )
	.Controller/key DEI
	DUP LIT '+ ! ,&no-inc JCN
		.selection/from LDZ2 LDA INC ;fill-selection JSR2 POP BRK
		&no-inc
	DUP LIT '- ! ,&no-dec JCN
		.selection/from LDZ2 LDA #01 - ;fill-selection JSR2 POP BRK
		&no-dec
	DUP #0d ! ,&no-enter JCN
		.selection/from LDZ2 ;memsftr JSR2
		&no-enter
	DUP #08 ! ,&no-backspace JCN
		.selection/from LDZ2 ;memsftl JSR2
		&no-backspace
	DUP #1f > OVR #7f < #0101 !! ,&no-char JCN
		DUP ;input JSR2
		&no-char
	POP

BRK

@on-control ( -> )

	.Controller/key DEI
	DUP [ LIT 'a ] ! ,&no-select JCN
		;data ;select JSR2
		;data .length LDZ2 ++ #0001 -- ;select-until JSR2
		POP BRK
		&no-select
	( file )
	DUP [ LIT 'r ] ! ,&no-name JCN
		#00 ;draw-filepath JSR2
		;trap JSR2
		POP BRK
		&no-name
	DUP [ LIT 'R ] ! ,&no-rename JCN
		#00 ;draw-filepath JSR2
		;path/name #0020 ;mclr JSR2
		;trap JSR2
		POP BRK
		&no-rename
	DUP [ LIT 'n ] ! ,&no-new JCN
		#25 ;draw-filepath JSR2
		;new-file JSR2
		;redraw JSR2 POP BRK &no-new
	DUP [ LIT 'o ] ! ,&no-open JCN
		;load-file JSR2
		POP BRK &no-open
	DUP [ LIT 's ] ! ,&no-save JCN
		;save-file JSR2
		POP BRK  &no-save
	( snarf )
	DUP [ LIT 'c ] ! ,&no-copy JCN
		;copy-snarf JSR2 POP BRK
		&no-copy
	DUP [ LIT 'C ] ! ,&no-copy-string JCN
		;copy-string-snarf JSR2 POP BRK
		&no-copy-string
	DUP [ LIT 'v ] ! ,&no-paste JCN
		;paste-snarf JSR2 POP BRK
		&no-paste
	POP

BRK

@on-button-trap ( -> )

	.Controller/key DEI
	DUP ,&continue JCN
		POP BRK
		&continue
	( backspace ) #08 !~ ,&no-edit-backspace JCN
		( clamp ) ;path/name ;slen JSR2 NIP #00 = ,&edit-end JCN
		#00 ;draw-filepath JSR2
		;path/name ;spop JSR2
		#01 ;draw-filepath JSR2
		POP BRK
		&no-edit-backspace
	( special ) #20 >~ ,&no-edit-enter JCN
		;on-frame .Screen/vector DEO2
		;on-button .Controller/vector DEO2
		#00 .state/blink STZ
		#01 ;draw-filepath JSR2
		POP BRK
		&no-edit-enter
	( append ) ;path/name ;slen JSR2 NIP #1f = ,&edit-end JCN
	DUP ;path/name ROT ;sput JSR2
	#01 ;draw-filepath JSR2
	&edit-end
	POP

BRK

@on-mouse ( -> )

	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor-icn .Screen/addr DEO2
	.Mouse/state DEI #00 ! #41 + .Screen/sprite DEO

	.Mouse/wheel DEI
	DUP #01 ! ,&no-up JCN
		.selection/from LDZ2 #0008 -- ;select JSR2
		&no-up
	DUP #ff ! ,&no-down JCN
		.selection/from LDZ2 #0008 ++ ;select JSR2
		&no-down
	POP

	.Mouse/x DEI2 .Mouse/y DEI2
	OVR2 OVR2 .byte-frame ;within-rect JSR2
		;on-touch-byte JCN2
	OVR2 OVR2 .char-frame ;within-rect JSR2
		;on-touch-char JCN2
	OVR2 OVR2 .tile-frame ;within-rect JSR2
		;on-touch-tile JCN2
	OVR2 OVR2 .file-frame ;within-rect JSR2
		;on-touch-file JCN2
	OVR2 OVR2 .menu-frame ;within-rect JSR2
		;on-touch-menu JCN2
	POP2 POP2

BRK

@on-mouse-trap ( -> )

	( release trap on touch )
	( skip ) .Mouse/state DEI #01 JCN BRK

	;untrap JSR2

BRK

@on-touch-byte ( x* y* -> )

	( stash addr* )
	.byte-frame/y LDZ2 -- 10// NIP 8* STH
	.byte-frame/x LDZ2 -- 8// ;touch-table ++ LDA STHr +
	TOS ;data ++ [ .selection/scroll LDZ2 8** ++ ]
	STH2

	.Mouse/state DEI .cursor/last LDZ
	DUP2 #0100 !! ,&no-down JCN
		STH2kr ;select JSR2
		&no-down
	DUP2 #0001 !! ,&no-up JCN
		STH2kr ;select-until JSR2
		&no-up
	DUP2 #0101 !! ,&no-drag JCN
		STH2kr ;select-until JSR2
		&no-drag
	POP2

	#00 ;set-mode JSR2
	( pop addr* ) POP2r
	.Mouse/state DEI .cursor/last STZ

BRK

@on-touch-char ( x* y* -> )

	( stash addr* )
	.char-frame/y LDZ2 -- 10// NIP 8* STH
	.char-frame/x LDZ2 -- 8// NIP STHr +
	TOS ;data ++ [ .selection/scroll LDZ2 8** ++ ]
	STH2

	.Mouse/state DEI .cursor/last LDZ
	DUP2 #0100 !! ,&no-down JCN
		STH2kr ;select JSR2
		&no-down
	DUP2 #0001 !! ,&no-up JCN
		STH2kr ;select-until JSR2
		&no-up
	DUP2 #0101 !! ,&no-drag JCN
		STH2kr ;select-until JSR2
		&no-drag
	POP2

	#01 ;set-mode JSR2

	( pop addr* ) POP2r
	.Mouse/state DEI .cursor/last STZ

BRK

@on-touch-tile ( x* y* -> )

	.Mouse/state DEI #00 ! ,&continue JCN
		POP2 POP2 BRK
		&continue

	( row ) NIP2 .tile-frame/y LDZ2 -- 10// 8**
	;data ++ [ .selection/scroll LDZ2 8** ++ ]
	DUP2 .selection/from STZ2
		#0007 ++ ;select-until JSR2

BRK

@on-touch-file ( x* y* -> )

	.Mouse/state DEI #00 ! ,&continue JCN
		POP2 POP2 BRK
		&continue

	POP2 POP2

	( skip ) .Mouse/state DEI #01 JCN BRK
	#00 ;draw-filepath JSR2
	;trap JSR2

BRK

@on-touch-menu ( x* y* -> )

	.Mouse/state DEI #00 ! ,&continue JCN
		POP2 POP2 BRK
		&continue

	.menu-frame/y LDZ2 -- 8// NIP STH
	.menu-frame/x LDZ2 -- 8// NIP STHr

	( bitpad )
	OVR #04 < ;on-touch-menu-bitpad JCN2

	POP
	DUP #05 ! ,&no-inc JCN
		.selection/from LDZ2 LDA INC ;fill-selection JSR2
		&no-inc
	DUP #06 ! ,&no-dec JCN
		.selection/from LDZ2 LDA #01 - ;fill-selection JSR2
		&no-dec
	DUP #07 ! ,&no-rol JCN
		.selection/from LDZ2 LDA ROL ;fill-selection JSR2
		&no-rol
	DUP #08 ! ,&no-ror JCN
		.selection/from LDZ2 LDA ROR ;fill-selection JSR2
		&no-ror
	DUP #1a ! ,&no-make JCN
		;new-file JSR2
		&no-make
	DUP #1b ! ,&no-load JCN
		;load-file JSR2
		&no-load
	DUP #1d ! ,&no-save JCN
		;save-file JSR2
		&no-save
	POP
	RELEASE-MOUSE

BRK

@on-touch-menu-bitpad ( x* y* -> )

	4* + #07 SWP - #40 SFT #01 SWP SFT
	.selection/from LDZ2 LDA
	SWP EOR
	.selection/from LDZ2 STA
	;redraw JSR2
	RELEASE-MOUSE

BRK

@input ( byte -- )

	.selection/mode LDZ ,fill-selection JCN

	DUP ;char-hex JSR2 #ff = ,&skip JCN
	.selection/nibble LDZ ,&low JCN
		#01 .selection/nibble STZ
		;char-hex JSR2 #40 SFT .selection/from LDZ2 LDA #0f AND + ;fill-selection JSR2
		RTN
	&low
		#00 .selection/nibble STZ
		;char-hex JSR2 .selection/from LDZ2 LDA #f0 AND + ;fill-selection JSR2
		RTN
	&skip
		POP

RTN

@fill-selection ( byte -- )

	STH
	( Fill selection with byte )
	.selection/to LDZ2 INC2 .selection/from LDZ2
	&loop
		DUP2 STHkr ROT ROT STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2 POPr
	#01 .state/changed STZ
	;redraw JSR2

RTN

@select ( id* -- )

	DUP2 .selection/from LDZ2 == ,&skip JCN
	DUP2 ;data << ,&skip JCN
	DUP2 ;data .length LDZ2 ++ #0001 -- >> ,&skip JCN
	( valid )
	DUP2 .selection/from STZ2
	.selection/to STZ2
	#00 .selection/nibble STZ
	;follow-selection JSR2
	;redraw JSR2
	RTN
	&skip
	POP2

RTN

@select-until ( id* -- )

	DUP2 ;data .length LDZ2 ++ << ,&valid JCN
		POP2 RTN
		&valid
	.selection/to STZ2
	( clamp )
	.selection/to LDZ2 .selection/from LDZ2 >> ,&not-before JCN
		.selection/from LDZ2 .selection/to STZ2
		&not-before
	;follow-selection JSR2
	;redraw JSR2

RTN

@follow-selection ( -- )

	.selection/from LDZ2 ;data .selection/scroll LDZ2 8** ++ << ,&up JCN
	.selection/to LDZ2 ;data [ .byte-frame/rows LDZ2 8** #0001 -- ] ++ .selection/scroll LDZ2 8** ++  >> ,&down JCN
	RTN

	&up
		.selection/from LDZ2 #0001 -- ;scroll-to JSR2
		RTN

	&down
		.selection/to LDZ2 [ .byte-frame/rows LDZ2 8** ] -- #0008 ++ ;scroll-to JSR2

RTN

@set-mode ( mode -- )

	DUP .selection/mode LDZ ! ,&changed JCN
		POP RTN
		&changed
	.selection/mode STZ
	#00 .selection/nibble STZ
	;draw-menu JSR2

RTN

@reset-selection ( -- )

	.selection/from LDZ2 .selection/to STZ2
	#00 .selection/nibble STZ
	;redraw JSR2

RTN

@scroll-to ( addr* -- )

	;data -- 8// .selection/scroll STZ2

RTN

@is-selected ( id* -- flag )

	DUP2 .selection/from LDZ2 !! ,&continue JCN
		POP2 #01 RTN
		&continue
	DUP2 .selection/from LDZ2 >> ,&gt JCN
		POP2 #00 RTN
		&gt
	DUP2 .selection/to LDZ2 #0001 ++ << ,&lt JCN
		POP2 #00 RTN
		&lt
	POP2 #01

RTN

@memsftl ( addr* -- )

	DUP2 INC2 ;data .length LDZ2 ++ !! ,&can-shift JCN
		POP2 RTN
		&can-shift

	;data .length LDZ2 ++ SWP2
	&loop
		( a ) INC2k LDA STH
		( b ) DUP2 STHr ROT ROT STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

	.length LDZ2 #0001 -- .length STZ2
	;redraw JSR2

RTN

@memsftr ( addr* -- )

	#0001 -- ;data .length LDZ2 ++
	&loop
		( a ) LDAk STH
		( b ) INC2k STHr ROT ROT STA
		#0001 -- LTH2k ,&loop JCN
	POP2 POP2

	.length LDZ2 INC2 .length STZ2
	;redraw JSR2

RTN

@redraw ( -- )

	.byte-frame/rows LDZ2 #0000
	&loop
		( addr ) DUP2 8** ;data ++ .selection/scroll LDZ2 8** ++ STH2
		( y ) DUP2 10** .byte-frame/y LDZ2 ++
		STH2r ;draw-row JSR2
		INC2 GTH2k ,&loop JCN
	POP2 POP2

	.file-frame/x LDZ2 .file-frame/x2 LDZ2 .file-frame/y2 LDZ2 #03 ;line-hor JSR2
	;draw-menu JSR2
	;draw-position JSR2

RTN

@draw-row ( y* id* -- )

	;&row STA2
	;&y STA2

	AUTO-YADDR
	.frame/x LDZ2 .Screen/x DEO2
	;&y LDA2 .Screen/y DEO2

	#08 #00
	&bytes-loop
		( color ) DUP TOS ;&row LDA2 ++ ;get-byte-color JSR2 STH
		( byte ) DUP TOS ;&row LDA2 ++ LDA
			STHr ;draw-byte JSR2
		( space every second )
		DUP #01 AND #00 = ,&no-pad JCN
			.Screen/x DEI2k #0008 ++ ROT DEO2
			&no-pad
		INC GTHk ,&bytes-loop JCN
	POP2

	.char-frame/x LDZ2 .Screen/x DEO2

	#08 #00
	&chars-loop
		( color ) DUP TOS ;&row LDA2 ++ ;get-byte-color JSR2 STH
		( byte ) DUP TOS ;&row LDA2 ++ LDA 
		( dot invalids ) LIT '. OVR IS-VALID JMP SWP POP
			STHr ;draw-char JSR2
		INC GTHk ,&chars-loop JCN
	POP2
	AUTO-NONE

	.tile-frame/x LDZ2
	.Screen/y DEI2 
	;&row LDA2 #01
		;draw-tile JSR2

RTN
	&y $2 &row $2

@get-byte-color ( id* )

	DUP2 ;data .length LDZ2 ++ << ,&exists JCN
		POP2 #03 RTN
		&exists
	;is-selected JSR2 #07 MUL #01 +

RTN

@draw-tile ( x* y* addr* color -- )

	POP
	;&addr STA2
	;&y STA2
	;&x STA2

	#08 #00
	&ver
		DUP 2* TOS ;&y LDA2 ++ .Screen/y DEO2
		#08 #00
		&hor
			DUP 2* TOS ;&x LDA2 ++ .Screen/x DEO2
			( get pixel )
			OVR2 NIP OVR SWP
			( ch 1 )
			TOS ;&addr LDA2 ++ LDA
			SWP #07 SWP - SFT 2MOD
			.Screen/pixel DEO
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2

RTN
	&x $2 &y $2 &addr $2

@draw-menu ( -- )

	( bitpad )
	#08 #00
	&loop
		( highlight ) DUP 4/ .selection/nibble LDZ = .selection/mode LDZ ORA STH
		( state ) DUP #07 SWP - [ .selection/from LDZ2 LDA ] SWP SFT 2MOD STH
		( y ) DUP 4/ TOS 8** .menu-frame/y LDZ2 ++ STH2
		( x ) DUP 4MOD TOS 8** .menu-frame/x LDZ2 ++
		STH2r STHr #01 STHr + ,draw-bit JSR
		INC GTHk ,&loop JCN
	POP2

	( controls )
	.menu-frame/x LDZ2 #0028 ++ .Screen/x DEO2
	.menu-frame/y LDZ2 .Screen/y DEO2

	AUTO-YADDR
	LIT '+ #01 ;draw-char JSR2
	LIT '- #01 ;draw-char JSR2
	LIT '< #01 ;draw-char JSR2
	LIT '> #01 ;draw-char JSR2

	.menu-frame/x2 LDZ2 #0020 -- .Screen/x DEO2
	;make-icn #01 ;draw-sprite JSR2
	;load-icn #01 ;draw-sprite JSR2
	.Screen/x DEI2k #0008 ++ ROT DEO2
	;save-icn #01 .state/changed LDZ + ;draw-sprite JSR2

	AUTO-NONE

RTN

@draw-bit ( x* y* state color -- )

	STH
	( addr ) 8* TOS ;bit-icns ++ .Screen/addr DEO2
	( y ) .Screen/y DEO2
	( x ) .Screen/x DEO2
	STHr .Screen/sprite DEO

RTN

@draw-filepath ( color -- )

	.file-frame/x LDZ2 .Screen/x DEO2
	.file-frame/y LDZ2 .Screen/y DEO2

	AUTO-YADDR
	;path/name ( scroll )
		DUP2 ;slen JSR2 #0014 >> TOS 
		;path/name ;slen JSR2 #0014 -- ** ++
	ROT
		,draw-str JSR
	AUTO-NONE

RTN

@draw-position ( -- )

	AUTO-YADDR
	.file-frame/x2 LDZ2 #0048 -- .Screen/x DEO2 
	.file-frame/y LDZ2 .Screen/y DEO2
	.selection/to LDZ2 ;data -- #01 ,draw-short JSR
	LIT '/ #03 ,draw-char JSR
	.length LDZ2 #0001 -- #01 ,draw-short JSR
	AUTO-NONE

RTN

( primitives )

@draw-str ( str* color -- )

	STH
	&while
		LDAk STHkr ,draw-char JSR
		INC2 LDAk ,&while JCN
	POP2
	POPr

JMP2r

@draw-short ( short* color -- )

	STH
	SWP STHkr ,draw-byte JSR
	STHr ,draw-byte JSR

RTN

@draw-byte ( byte color -- )

	STH
	DUP #04 SFT ,&parse JSR STHkr ,draw-char JSR
	#0f AND ,&parse JSR STHr ,draw-char JSR
	RTN
	&parse ( value -- char )
		DUP #09 > ,&above JCN
			#30 + RTN
		&above
			#09 - #60 + RTN

RTN

@draw-char ( char color -- )

	SWP [ #20 - #00 SWP #40 SFT2 ;font ++ ] ROT ,draw-sprite JSR

JMP2r

@draw-sprite ( addr* color -- )
	
	STH .Screen/addr DEO2
	.Screen/y DEI2
	STHr .Screen/sprite DEOk DEO
	.Screen/y DEO2
	.Screen/x DEI2k #0008 ++ ROT DEO2

RTN

( file )

@new-file ( -- )

	( clear )
	;data #ffff OVR2 -- ;mclr JSR2
	;data ;select JSR2
	#00 ;draw-filepath JSR2
	( rename to untitled.txt )
	;path/name #0020 ;mclr JSR2
	;untitled-txt ;path/name #000c ;mcpy JSR2
	#01 ;draw-filepath JSR2
	#0000 .selection/scroll STZ2
	#0008 .length STZ2
	#00 .state/changed STZ
	;redraw JSR2

RTN

@load-file ( -- )

	( load bytes )
	;path/name .File/name DEO2
	#ffff ;data -- .File/length DEO2
	;data .File/load DEO2
	.File/success DEI2 #0001 MIN2 .length STZ2
	#00 .state/changed STZ
	;reset-selection JSR2

RTN

@save-file ( -- )

	;path/name .File/name DEO2
	.length LDZ2 .File/length DEO2
	;data .File/save DEO2
	#00 .state/changed STZ
	;redraw JSR2

RTN

( snarf )

@snarf-txt ".snarf $1

@copy-snarf ( -- )

	;snarf-txt .File/name DEO2
	.selection/to LDZ2 .selection/from LDZ2 -- INC2 .File/length DEO2
	.selection/from LDZ2 .File/save DEO2

RTN

@copy-string-snarf ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	.selection/to LDZ2 INC2 .selection/from LDZ2
	&stream
		LDAk #04 SFT ;print-hex/parse JSR2 ,&write JSR
		LDAk #0f AND ;print-hex/parse JSR2 ,&write JSR
		( formatting )
		DUP2 .selection/from LDZ2 --
		DUP2 #000f AND2 #000f !! ,&no-linebreak JCN 
			#0d ,&write JSR ,&end JMP 
			&no-linebreak
		DUP2 #0001 AND2 #0001 !! ,&no-space JCN 
			#20 ,&write JSR
			&no-space
		&end
		POP2
		INC2 GTH2k ,&stream JCN
	POP2 POP2

RTN
	&write ;&b STA ;&b .File/save DEO2 RTN
	&b $1

@paste-snarf ( -- )

	;snarf-txt .File/name DEO2
	.length LDZ2 .selection/from LDZ2 ;data -- -- .File/length DEO2
	.selection/from LDZ2 .File/load DEO2
	;redraw JSR2

RTN

( theme )

@theme-txt ".theme $1

@load-theme ( -- )

	;theme-txt .File/name DEO2
	#0006 .File/length DEO2
	#fffa .File/load DEO2

	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore
	;redraw JSR2

RTN

( generics )

@line-hor ( x0* x1* y* color -- )

	STH .Screen/y DEO2 SWP2
	&loop
		( save ) DUP2 .Screen/x DEO2
		( draw ) STHkr .Screen/pixel DEO
		INC2 INC2 GTH2k ,&loop JCN
	POP2 POP2 POPr

RTN

@within-rect ( x* y* rect -- flag )

	STH
	( y < rect.y1 ) DUP2 STHkr #02 ADD LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 ADD LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 ADD LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@char-hex ( key -- value )

	DUP #2f > OVR #3a < #0101 !! ,&no-num JCN
		#30 - RTN
		&no-num
	DUP #60 > OVR #67 < #0101 !! ,&no-lc JCN
		#57 - RTN ( #61 - #0a + )
		&no-lc
	DUP #40 > OVR #47 < #0101 !! ,&no-uc JCN
		#37 - RTN ( #41 - #0a + )
		&no-uc
	POP #ff

RTN

@print-hex ( value* -- )
	
	SWP ,&byte JSR 
	&byte ( byte -- )
		STHk #04 SFT ,&parse JSR #18 DEO
		STHr #0f AND ,&parse JSR #18 DEO
	RTN
	&parse ( byte -- char ) DUP #09 GTH ,&above JCN #30 + RTN 
	&above #57 + RTN

RTN

( string generics )

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 --

RTN

@scap ( str* -- str-end* )

	( clamp ) LDAk #00 ! JMP RTN
	&while INC2 LDAk ,&while JCN

RTN

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

RTN

@spop ( str* -- )

	( clamp ) LDAk #00 ! JMP RTN
	#00 ROT ROT ,scap JSR #0001 -- STA

RTN

( memory generics )

@mclr ( addr* len* -- )

	OVR2 ++ SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@mcpy ( src* dst* len* -- )

	SWP2 STH2 SWP2 STH2
	#0000
	&loop 
		( src ) STH2kr LDA
		( dst ) OVR2r STH2r STA
		( inc ) INC2r SWP2r INC2r SWP2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r POP2r

RTN

@untitled-txt  "untitled.chr $1

@make-icn
	00fe 8282 8282 8282 
	8282 8282 848a f400
@load-icn
	00fe d6aa d6aa d6aa 
	d6aa d6aa d4aa f400
@save-icn
	0010 1092 9254 5428 
	d628 5454 9292 1000
@cursor-icn
	80c0 e0f0 f8e0 1000
@bit-icns
	3844 8282 8244 3800
	387c fefe fe7c 3800
@touch-table
	0000 0101 0202 0203
	0303 0404 0505 0606
	0607 0707 0000 0000

~src/font.tal

@data