(
	app/dexe : hex editor
	
	arrows     - move selection
	enter      - insert byte
	backspace  - delete byte
	left-click - select bytes

	TODO:
		copy/paste
		scrollbar
)

%+  { ADD } %-   { SUB }  %*  { MUL } %/   { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%DEBUG  { ;print-hex/byte JSR2 #0a .Console/write DEO }
%DEBUG2 { ;print-hex/short JSR2 #0a .Console/write DEO }

%RTN  { JMP2r }
%SWP2? { #01 JCN SWP }
%BRK? { #01 JCN BRK }

%2*   { #10 SFT }
%8*   { #30 SFT }
%20*  { #50 SFT } 
%40*  { #60 SFT }
%2**  { #10 SFT2 } %2// { #01 SFT2 }
%4**  { #20 SFT2 } %4// { #02 SFT2 }
%8**  { #30 SFT2 } %8// { #03 SFT2 }
%10** { #40 SFT2 } %10// { #04 SFT2 }

%TOS  { #00 SWP } %TOB { SWP POP }
%INCR { SWP #01 + SWP }
%TOGGLE { DUP LDZ #00 = SWP STZ }
%INCR2 { SWP2 #0001 ++ SWP2 }
%DECR2 { SWP2 #0001 -- SWP2 }

%ASCII-FONT { TOS #0008 ** ;font-hex ++ }
%RELEASE-MOUSE { #00 .Mouse/state DEO }
%RESET-SELECTION { #0000 DUP2 .selection/from STZ2 .selection/to STZ2 }
%SET-STATE   { #01 .state/changed STZ ;draw-state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-state JSR2 }

( devices )

|00 @System     &vector $2 &pad     $6 &r      $2 &g     $2 &b     $2
|10 @Console    &vector $2 &read    $1 &pad    $5 &write $1 
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button  $1 &key    $1
|90 @Mouse      &vector $2 &x       $2 &y      $2 &state $1 &wheel $1
|a0 @File       &vector $2 &success $2 &offset $2 &pad   $2 &name  $2 &length $2 &load $2 &save $2

( variables )

|0000

@scroll $2
@cursor 
	&x $2 &y $2 
@state
	&timer $1
	&trap $1
	&blink $1
	&changed $1
@path 
	&length $1
	&name $20
@pointer
	&x $2 
	&y $2
	&last $1
@selection
	&from $2
	&to $2
	&scroll $2
	&nibble $1
@frame
	&x $2 &y $2 &x2 $2 &y2 $2 
@file-frame
	&x $2 &y $2 &x2 $2 &y2 $2 
@byte-frame
	&x $2 &y $2 &x2 $2 &y2 $2 
@char-frame
	&x $2 &y $2 &x2 $2 &y2 $2 
@tile-frame
	&x $2 &y $2 &x2 $2 &y2 $2 
@menu-frame
	&x $2 &y $2 &x2 $2 &y2 $2 

( program )

|0100
	
	( theme )
	#0f77 .System/r DEO2 
	#0fc7 .System/g DEO2 
	#0f97 .System/b DEO2

	( vectors ) 
	;untrap JSR2

	( set size )
	#0160 .Screen/width DEO2
	#0180 .Screen/height DEO2

	( frame )
	.Screen/width DEI2 2// #0088 -- DUP2 .frame/x STZ2
		#0100 ++ .frame/x2 STZ2
	.Screen/height DEI2 2// #00a0 -- DUP2 .frame/y STZ2
		#0100 ++ .frame/y2 STZ2

	.frame/x LDZ2 
		DUP2 .file-frame/x STZ2 #0100 ++ .file-frame/x2 STZ2
	.frame/y LDZ2 
		DUP2 .file-frame/y STZ2 #0018 ++ .file-frame/y2 STZ2

	.frame/x LDZ2 
		DUP2 .byte-frame/x STZ2 #00c0 ++ .byte-frame/x2 STZ2
	.frame/y LDZ2 #0020 ++
		DUP2 .byte-frame/y STZ2 #0100 ++ .byte-frame/y2 STZ2

	.byte-frame/x2 LDZ2 
		DUP2 .char-frame/x STZ2 #0040 ++ .char-frame/x2 STZ2
	.byte-frame/y LDZ2 
		DUP2 .char-frame/y STZ2 #0100 ++ .char-frame/y2 STZ2

	.char-frame/x2 LDZ2 #0008 ++
		DUP2 .tile-frame/x STZ2 #0008 ++ .tile-frame/x2 STZ2
	.byte-frame/y LDZ2 
		DUP2 .tile-frame/y STZ2 #0100 ++ .tile-frame/y2 STZ2

	.frame/x LDZ2
		DUP2 .menu-frame/x STZ2 #0100 ++ .menu-frame/x2 STZ2
	.frame/y LDZ2 #0130 ++
		DUP2 .menu-frame/y STZ2 #0010 ++ .menu-frame/y2 STZ2

	;untitled-txt ;new-file JSR2

	#0000 .scroll STZ2
	;MEMORY ;select JSR2

BRK

@untrap ( -- )
	
	( vectors ) 
	;on-frame .Screen/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2

	( filepath )
	#00 .state/blink STZ 
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

RTN

@trap ( -- )

	( vectors ) 
	;on-frame-trap .Screen/vector DEO2
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2

	( filepath )
	#01 .state/blink STZ 
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

RTN

@on-frame ( -> )
	
BRK

@on-frame-trap ( -> )

	( incr ) .state/timer LDZ INC DUP .state/timer STZ 

	#08 ! ,&no-toggle JCN
		.state/blink TOGGLE
		#01 .state/blink LDZ 8* + ;draw-filepath JSR2
		#00 .state/timer STZ 
		&no-toggle
	
BRK

@on-button ( -> )

	.Controller/button DEI
	DUP #10 ! ,&no-up JCN
		.selection/from LDZ2 #0008 -- ;select JSR2 POP BRK
		&no-up
	DUP #20 ! ,&no-down JCN
		.selection/from LDZ2 #0008 ++ ;select JSR2 POP BRK
		&no-down
	DUP #40 ! ,&no-left JCN
		.selection/from LDZ2 #0001 -- ;select JSR2 POP BRK
		&no-left
	DUP #80 ! ,&no-right JCN
		.selection/from LDZ2 #0001 ++ ;select JSR2 POP BRK
		&no-right

	( ctrl )
	#01 = ;on-control JCN2

BRK

@on-control ( -> )
	
	.Controller/key DEI
	DUP [ LIT 'r ] ! ,&no-name JCN
		#00 ;draw-filepath JSR2 
		;trap JSR2
		POP BRK
		&no-name
	DUP [ LIT 'R ] ! ,&no-rename JCN
		#00 ;draw-filepath JSR2 
		#00 .Controller/key DEO
		#00 .path/length STZ
		#0000 .path/name STZ2
		;trap JSR2
		POP BRK
		&no-rename
	DUP [ LIT 'n ] ! ,&no-new JCN
		#25 ;draw-filepath JSR2
		;untitled-txt ;new-file JSR2
		;redraw JSR2 POP BRK &no-new
	DUP [ LIT 'o ] ! ,&no-open JCN
		;load-file JSR2
		;redraw JSR2 POP BRK &no-open
	DUP [ LIT 's ] ! ,&no-save JCN
		;path/name ;save-file JSR2 
		POP BRK  &no-save
	POP 

BRK

@on-button-trap ( -> )

	.Controller/key DEI
	DUP ,&continue JCN
		POP BRK
		&continue
	DUP ( backspace ) #08 ! ,&no-edit-backspace JCN
		( clamp ) .path/length LDZ #00 = ,&edit-end JCN
		#00 ;draw-filepath JSR2
		.path/length LDZ #01 - STHk .path/length STZ
		#00 .path/name STHr + STZ
		#01 ;draw-filepath JSR2 POP BRK
		&no-edit-backspace
	DUP ( special ) #20 > ,&no-edit-enter JCN
		;untrap JSR2 POP BRK
		&no-edit-enter
	( clamp ) .path/length LDZ #1f = ,&edit-end JCN
	DUP .path/name .path/length LDZ STHk + STZ
	STHr INC STHk .path/length STZ
	#00 .path/name STHr + STZ
	#01 ;draw-filepath JSR2
	&edit-end
	POP

BRK

@on-mouse ( -> )

	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor-icn .Screen/addr DEO2
	.Mouse/state DEI #00 ! #41 + .Screen/sprite DEO

	.Mouse/wheel DEI 
	DUP #01 ! ,&no-up JCN
		.selection/from LDZ2 #0008 -- ;select JSR2
		&no-up
	DUP #ff ! ,&no-down JCN
		.selection/from LDZ2 #0008 ++ ;select JSR2
		&no-down
	POP

	.Mouse/state DEI BRK?

	.Mouse/x DEI2 .Mouse/y DEI2 
	( begin with canvas )
	OVR2 OVR2 .byte-frame ;within-rect JSR2
		;on-touch-byte JCN2
	OVR2 OVR2 .char-frame ;within-rect JSR2
		;on-touch-char JCN2
	OVR2 OVR2 .tile-frame ;within-rect JSR2
		;on-touch-tile JCN2
	OVR2 OVR2 .file-frame ;within-rect JSR2
		;on-touch-file JCN2
	POP2 POP2
	
BRK

@on-mouse-trap ( -> )

	( release trap on touch )
	.Mouse/state DEI BRK?

	;untrap JSR2
	
BRK

@on-touch-byte ( x* y* -> )

	.byte-frame/y LDZ2 -- 10// NIP 8* STH
	.byte-frame/x LDZ2 -- 8// NIP #03 DIV STHr +

	TOS ;MEMORY ++ [ .scroll LDZ2 8** ++ ] ;select JSR2

BRK

@on-touch-char ( x* y* -> )

	.char-frame/y LDZ2 -- 10// NIP 8* STH
	.char-frame/x LDZ2 -- 8// NIP STHr +

	TOS ;MEMORY ++ [ .scroll LDZ2 8** ++ ] ;select JSR2

BRK

@on-touch-tile ( x* y* -> )

	POP2 POP2

BRK

@on-touch-file ( x* y* -> )

	POP2 POP2
	#00 ;draw-filepath JSR2 
	;trap JSR2

BRK

@select ( id* -- )

	DUP2 .selection/from LDZ2 == ,&skip JCN
	DUP2 ;MEMORY << ,&skip JCN
	DUP2 ;MEMORY ;MEMORY-LEN LDA2 ++ >> ,&skip JCN
	( valid )
	DUP2 .selection/from STZ2
	.selection/to STZ2
	;follow JSR2
	;redraw JSR2
	RTN
	&skip
	POP2

RTN

@follow ( -- )

	.selection/from LDZ2 ;MEMORY .scroll LDZ2 8** ++ << ,&up JCN
	.selection/to LDZ2 ;MEMORY #007f ++ .scroll LDZ2 8** ++  >> ,&down JCN
	RTN

	&up
		.selection/from LDZ2 #0001 -- ;scroll-to JSR2 
		RTN

	&down
		.selection/to LDZ2 #0080 -- #0008 ++ ;scroll-to JSR2

RTN

@scroll-to ( addr* -- )

	;MEMORY -- 8// .scroll STZ2

RTN

@is-selected ( id* -- flag )

	DUP2 .selection/from LDZ2 == ,&yes JCN
	STH2k .selection/from LDZ2 >> STH2r .selection/from LDZ2 << #0101 == ,&yes JCN
		#00
	RTN
	&yes
		POP2 #01 

RTN

@redraw ( -- )

	#0010 #0000 
	&loop
		( addr ) DUP2 8** ;MEMORY ++ .scroll LDZ2 8** ++ STH2
		( y ) DUP2 10** .byte-frame/y LDZ2 ++
		STH2r ;draw-row JSR2
		INC2 GTH2k ,&loop JCN
	POP2 POP2

	.file-frame/x LDZ2 .file-frame/x2 LDZ2 .file-frame/y2 LDZ2 #03 ;line-hor JSR2

	;draw-menu JSR2
	( 
	.file-frame #01 ;line-rect JSR2
	.byte-frame #01 ;line-rect JSR2
	.char-frame #02 ;line-rect JSR2
	.tile-frame #03 ;line-rect JSR2
	.menu-frame #03 ;line-rect JSR2
	 )

RTN

@draw-row ( y* id* -- )

	;&row STA2
	;&y STA2

	#08 #00
	&bytes-loop
		( color ) DUP TOS ;&row LDA2 ++ ;is-selected JSR2 #07 MUL #01 + STH
		( byte ) DUP TOS ;&row LDA2 ++ LDA STH
		( y ) ;&y LDA2 STH2
		( x-block ) DUP #03 MUL TOS 8** .frame/x LDZ2 ++
		STH2r STHr STHr ;draw-byte JSR2
		INC GTHk ,&bytes-loop JCN
	POP2

	#08 #00
	&chars-loop
		( color ) DUP TOS ;&row LDA2 ++ ;is-selected JSR2 #07 MUL #01 + STH
		( byte ) DUP TOS ;&row LDA2 ++ LDA STH
		( y ) ;&y LDA2 STH2
		( x-block ) DUP TOS 8** .frame/x LDZ2 ++ #00c0 ++
		STH2r STHr STHr ;draw-char JSR2
		INC GTHk ,&chars-loop JCN
	POP2

	.Screen/y DEI2 #0010 -- .Screen/y DEO2
	#0108 .frame/x LDZ2 ++ .Screen/x DEO2
	;&row LDA2 .Screen/addr DEO2
	#01 .Screen/sprite DEO

RTN
	&y $2 &row $2

@draw-byte ( x* y* byte color -- )

	#06 .Screen/auto DEO
	STH STH
	.Screen/y DEO2
	.Screen/x DEO2
	STHr
	DUP
		( hn )
		#04 SFT ,&parse JSR #18 - TOS 10** ;font-hex ++ .Screen/addr DEO2
		STHkr .Screen/sprite DEO
		STHkr .Screen/sprite DEO
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	.Screen/y DEI2 #0010 -- .Screen/y DEO2
		( ln )
		#0f AND ,&parse JSR #18 - TOS 10** ;font-hex ++ .Screen/addr DEO2
		STHkr .Screen/sprite DEO
		STHr .Screen/sprite DEO
	#00 .Screen/auto DEO
	RTN
	&parse ( value -- char )
		DUP #09 > ,&above JCN 
			#30 + RTN 
		&above 
			#09 - #60 + RTN

RTN

@draw-char ( x* y* char color -- )

	#06 .Screen/auto DEO

	STH STH
	.Screen/y DEO2
	.Screen/x DEO2
	STHr

	DUP #1f > OVR #80 < #0101 == ,&visible JCN
		POP ;font #000e 10** ++ ,&resume JMP
	&visible
		#20 - TOS 10** ;font ++
	&resume
	.Screen/addr DEO2
	
	STHkr .Screen/sprite DEO
	STHr .Screen/sprite DEO

	#00 .Screen/auto DEO

RTN

@draw-menu ( -- )

	( start byte )
	.selection/from LDZ2 ;MEMORY -- STH STH
	.menu-frame/x LDZ2 .menu-frame/y LDZ2 STHr #01 ;draw-byte JSR2
	.menu-frame/x LDZ2 #0010 ++ .menu-frame/y LDZ2 STHr #01 ;draw-byte JSR2

	( / )
	.menu-frame/x LDZ2 #0020 ++ .menu-frame/y LDZ2 LIT '/ #03 ;draw-char JSR2

	( end byte )
	;MEMORY-LEN LDA2 STH STH
	.menu-frame/x LDZ2 #0028 ++ .menu-frame/y LDZ2 STHr #01 ;draw-byte JSR2
	.menu-frame/x LDZ2 #0038 ++ .menu-frame/y LDZ2 STHr #01 ;draw-byte JSR2

	( filepath )
	#01 ;draw-filepath JSR2

RTN

@draw-state ( -- )
	

RTN

@draw-filepath ( color -- )
	
	STH
	.file-frame/x LDZ2
	.file-frame/y LDZ2 
	;path/name STHr 
		;draw-text JSR2

RTN

@draw-text ( x* y* addr* color -- )

	#07 .Screen/auto DEO
	STH
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	&while
		LDAk ;char-addr JSR2 .Screen/addr DEO2
		STHkr .Screen/sprite DEO
		.Screen/x DEI2 #0008 -- .Screen/x DEO2
		STHkr .Screen/sprite DEO
		.Screen/y DEI2 #0010 -- .Screen/y DEO2
		INC2 LDAk ,&while JCN
	POP2
	POPr
	#00 .Screen/auto DEO

RTN

@char-addr ( char -- addr* )

	#20 - TOS 10** ;font ++

RTN

( file )

@new-file ( default* -- )

	STH2
	#0c #00
	&loop
		DUP DUP TOS STH2kr ++ LDA
		SWP .path/name + STZ
		INC GTHk ,&loop JCN
	( end ) #00 SWP .path/name + STZ 
	.path/length STZ 
	POP2r
	RESET-STATE
	;redraw JSR2

RTN

@load-file ( -- )

	( load bytes )
	;path/name .File/name DEO2
	#1000         .File/length DEO2
	;MEMORY       .File/load DEO2
	.File/success DEI2 ;MEMORY-LEN STA2
	RESET-STATE
	;redraw JSR2

RTN

@save-file ( -- )

	;path/name .File/name DEO2 
	;MEMORY-LEN LDA2 .File/length DEO2 
	;MEMORY .File/save DEO2 
	RESET-STATE

RTN

( generics )

@line-hor ( x0* x1* y* color -- )

	STH .Screen/y DEO2 SWP2
	&loop
		( save ) DUP2 .Screen/x DEO2
		( draw ) STHkr .Screen/pixel DEO
		#0002 ++ GTH2k ,&loop JCN
	POP2 POP2 POPr

RTN

@line-rect ( rect color -- )

	STH STH
	( y2 ) STHkr #06 + LDZ2
	( y1 ) STHkr #02 + LDZ2 #0001 -- ( flip sign ) GTH2k SWP2?
	&ver
		( save ) DUP2 .Screen/y DEO2
		( x1 ) STHkr LDZ2 #0001 -- .Screen/x DEO2 
		OVRr STHr .Screen/pixel DEO
		( x2 ) STHkr #04 + LDZ2 .Screen/x DEO2 
		OVRr STHr .Screen/pixel DEO
		( incr )
		INC2 GTH2k ,&ver JCN
	POP2
	( x2 ) STHkr #04 + LDZ2
	( x1 ) STHkr LDZ2 #0001 -- ( flip sign ) GTH2k SWP2?
	&hor
		( save ) DUP2 .Screen/x DEO2
		( y1 ) STHkr #02 + LDZ2 #0001 -- .Screen/y DEO2 
		OVRr STHr .Screen/pixel DEO
		( y2 ) STHkr #06 + LDZ2 .Screen/y DEO2 
		OVRr STHr .Screen/pixel DEO
		( incr )
		INC2 GTH2k ,&hor JCN
	POP2
	POPr 
	.Screen/x DEO2
	.Screen/y DEO2 
	STHr .Screen/pixel DEO

RTN

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 ADD LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 ADD LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 ADD LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@print-hex ( value* -- )
	
	&short ( value* -- )
		SWP ,&echo JSR 
	&byte ( value -- )
		,&echo JSR
	RTN

	&echo ( value -- )
	STHk #04 SFT ,&parse JSR .Console/write DEO
	STHr #0f AND ,&parse JSR .Console/write DEO
	RTN
	&parse ( value -- char )
		DUP #09 GTH ,&above JCN #30 + RTN &above #09 - #60 + RTN

RTN

@byte-spacing
	0002 0507 0a0c 0f11
	1416 191b 1e20 2325

@untitled-txt  "untitled.chr $1
@cursor-icn    80c0 e0f0 f8e0 1000

@scrollbar_icn
	aa55 aa55 aa55 aa55 ( bg )
	ffff ffff ffff ffff ( fg )
	0010 387c fe10 1010 ( up )
	0010 1010 fe7c 3810 ( down )

@font-hex
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080 

include src/font.tal

@MEMORY-LEN $2

@MEMORY